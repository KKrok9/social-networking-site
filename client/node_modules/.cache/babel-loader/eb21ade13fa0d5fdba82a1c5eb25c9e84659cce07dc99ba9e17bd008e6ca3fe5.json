{"ast":null,"code":"// NALEZY NAJPIERW SPRAWDZIĆ CZY FORMULARZE NIE SĄ EMPTY\n\nconst emailRegex = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i;\nconst CheckEmail = email => {\n  return emailRegex.test(email);\n};\n_c = CheckEmail;\nfunction CheckIfIsntEmpty(value) {\n  return value.trim() !== \"\";\n}\n_c2 = CheckIfIsntEmpty;\nconst CheckIfUserAdult = dateOfBirth => {\n  if (CheckIfIsntEmpty(dateOfBirth)) {\n    const MIN_AGE = 16;\n    const currentDate = new Date();\n    const userDateOfBirth = new Date(dateOfBirth);\n    const differenceInMilliseconds = currentDate.getTime() - userDateOfBirth.getTime();\n    const yearsOld = Math.floor(differenceInMilliseconds / (1000 * 60 * 60 * 24 * 365));\n    return yearsOld >= MIN_AGE;\n  } else {\n    return false;\n  }\n};\n_c3 = CheckIfUserAdult;\nconst CheckPasswordLength = password => {\n  if (CheckIfIsntEmpty(password)) {\n    const PASSWORD_LENGTH = 7;\n    return password.length >= PASSWORD_LENGTH;\n  } else {\n    return false;\n  }\n};\n_c4 = CheckPasswordLength;\nconst CheckIfPasswordsAreMatching = (password, repeatedPassword) => {\n  if (CheckIfIsntEmpty(password) && CheckIfIsntEmpty(repeatedPassword)) {\n    return password === repeatedPassword;\n  } else {\n    return false;\n  }\n};\n_c5 = CheckIfPasswordsAreMatching;\nconst CheckIfFormIsValid = (name, surname, email, birthday, password1, password2) => {\n  if (CheckIfIsntEmpty(name) && CheckIfIsntEmpty(surname) && CheckEmail(email) && CheckIfUserAdult(birthday) && CheckPasswordLength(password1) && CheckIfPasswordsAreMatching(password1, password2)) {\n    return true;\n  } else {\n    return false;\n  }\n};\n_c6 = CheckIfFormIsValid;\nconst validate = values => {\n  const errors = {};\n  if (!CheckEmail(values.email)) {\n    errors.email = \"Email is not correct!\";\n  }\n  if (!CheckPasswordLength(values.password)) {\n    errors.password = \"Password is too short!\";\n  }\n};\nexport { CheckEmail, CheckPasswordLength, CheckIfPasswordsAreMatching, CheckIfUserAdult, CheckIfIsntEmpty, CheckIfFormIsValid };\nvar _c, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"CheckEmail\");\n$RefreshReg$(_c2, \"CheckIfIsntEmpty\");\n$RefreshReg$(_c3, \"CheckIfUserAdult\");\n$RefreshReg$(_c4, \"CheckPasswordLength\");\n$RefreshReg$(_c5, \"CheckIfPasswordsAreMatching\");\n$RefreshReg$(_c6, \"CheckIfFormIsValid\");","map":{"version":3,"names":["emailRegex","CheckEmail","email","test","_c","CheckIfIsntEmpty","value","trim","_c2","CheckIfUserAdult","dateOfBirth","MIN_AGE","currentDate","Date","userDateOfBirth","differenceInMilliseconds","getTime","yearsOld","Math","floor","_c3","CheckPasswordLength","password","PASSWORD_LENGTH","length","_c4","CheckIfPasswordsAreMatching","repeatedPassword","_c5","CheckIfFormIsValid","name","surname","birthday","password1","password2","_c6","validate","values","errors","$RefreshReg$"],"sources":["C:/Users/kacpe/Desktop/STUDIAA/PAI/social-network-app/social-network-app/client/src/utils/validation.js"],"sourcesContent":["// NALEZY NAJPIERW SPRAWDZIĆ CZY FORMULARZE NIE SĄ EMPTY\r\n\r\nconst emailRegex = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i;\r\nconst CheckEmail = (email) => {\r\n  return emailRegex.test(email);\r\n};\r\n\r\nfunction CheckIfIsntEmpty(value) {\r\n  return value.trim() !== \"\";\r\n}\r\n\r\nconst CheckIfUserAdult = (dateOfBirth) => {\r\n  if (CheckIfIsntEmpty(dateOfBirth)) {\r\n    const MIN_AGE = 16;\r\n\r\n    const currentDate = new Date();\r\n    const userDateOfBirth = new Date(dateOfBirth);\r\n\r\n    const differenceInMilliseconds =\r\n      currentDate.getTime() - userDateOfBirth.getTime();\r\n    const yearsOld = Math.floor(\r\n      differenceInMilliseconds / (1000 * 60 * 60 * 24 * 365)\r\n    );\r\n    return yearsOld >= MIN_AGE;\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\n\r\nconst CheckPasswordLength = (password) => {\r\n  if (CheckIfIsntEmpty(password)) {\r\n    const PASSWORD_LENGTH = 7;\r\n\r\n    return password.length >= PASSWORD_LENGTH;\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\n\r\nconst CheckIfPasswordsAreMatching = (password, repeatedPassword) => {\r\n  if (CheckIfIsntEmpty(password) && CheckIfIsntEmpty(repeatedPassword)) {\r\n    return password === repeatedPassword;\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\n\r\nconst CheckIfFormIsValid = (\r\n  name,\r\n  surname,\r\n  email,\r\n  birthday,\r\n  password1,\r\n  password2\r\n) => {\r\n  if (\r\n    CheckIfIsntEmpty(name) &&\r\n    CheckIfIsntEmpty(surname) &&\r\n    CheckEmail(email) &&\r\n    CheckIfUserAdult(birthday) &&\r\n    CheckPasswordLength(password1) &&\r\n    CheckIfPasswordsAreMatching(password1, password2)\r\n  ) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\n\r\nconst validate = (values) =>{\r\n  const errors = {};\r\n  if(!CheckEmail(values.email)){\r\n    errors.email = \"Email is not correct!\"\r\n  }\r\n  if(!CheckPasswordLength(values.password)){\r\n    errors.password = \"Password is too short!\";\r\n  }\r\n}\r\n\r\nexport {\r\n  CheckEmail,\r\n  CheckPasswordLength,\r\n  CheckIfPasswordsAreMatching,\r\n  CheckIfUserAdult,\r\n  CheckIfIsntEmpty,\r\n  CheckIfFormIsValid,\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}